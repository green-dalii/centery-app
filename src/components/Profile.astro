---
import { Icon } from 'astro-icon/components';
---
<div class="p-4">
    <div class="flex items-center text-base text-primary font-bold mb-4">
        <Icon name="mdi:account" class="text-xl mr-2" />
        <h2>我的</h2>
    </div>
    <div class="mb-6">
        <div class="flex items-center justify-between space-x-4 mb-4">
            <div class="flex items-center space-x-4">
                <div class="w-16 h-16 bg-primary rounded-full flex items-center justify-center">
                    <span class="text-primary-content text-xl font-bold" id="user-avatar">U</span>
                </div>
                <div>
                    <h3 class="font-semibold text-base-content" id="user-name">用户名</h3>
                    <p class="text-sm text-base-content/60">欢迎使用Centery</p>
                </div>
            </div>
            <button id="logout-btn" class="btn btn-error">退出登录</button>
        </div>
    </div>

    <div class="space-y-4">
        <!-- Orders Section -->
        <div class="bg-base-200 rounded-lg border border-base-300 p-4">
            <h4 class="font-medium text-base-content mb-3">我的订单</h4>
            <div id="order-filters" class="flex space-x-2 mb-4 overflow-x-auto pb-2">
                <button class="btn btn-soft filter-btn" data-status="pending">已下单</button>
                <button class="btn btn-soft filter-btn" data-status="processing">待发货</button>
                <button class="btn btn-soft filter-btn" data-status="shipped">待收货</button>
                <button class="btn btn-soft filter-btn" data-status="completed">已完成</button>
                <button class="btn btn-soft filter-btn" data-status="all">全部订单</button>
            </div>
            <div id="orders-list" class="space-y-3">
                <!-- Orders will be loaded here -->
            </div>
        </div>

        <!-- Addresses Section -->
        <div class="bg-base-200 rounded-lg border border-base-300 p-4">
            <h4 class="font-medium text-base-content mb-3">地址管理</h4>
            <div id="addresses-list" class="space-y-3">
                <!-- Addresses will be loaded here -->
            </div>
            <button id="add-address-btn" class="btn btn-outline btn-primary w-full mt-3">+ 添加新地址</button>
        </div>

    </div>
</div>

<!-- Address Modal -->
<dialog id="address-modal" class="modal">
    <div class="modal-box">
        <form method="dialog">
            <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
        </form>
        <h3 id="modal-title" class="font-bold text-lg mb-4">添加新地址</h3>
        <form id="address-form" class="space-y-4">
            <input type="hidden" id="address-id">
            <div class="form-control">
                <label class="label">
                    <span class="label-text">收件人</span>
                </label>
                <input type="text" id="recipient-name" name="recipient_name" class="input input-bordered w-full" required>
            </div>
            <div class="form-control">
                <label class="label">
                    <span class="label-text">联系电话</span>
                </label>
                <input type="tel" id="phone" name="phone" class="input input-bordered w-full" required>
            </div>
            <div class="form-control">
                <label class="label">
                    <span class="label-text">详细地址</span>
                </label>
                <textarea id="address" name="address" rows="3" class="textarea textarea-bordered w-full" required></textarea>
            </div>
            <div class="form-control">
                <label class="label cursor-pointer">
                    <span class="label-text">设为默认地址</span>
                    <input type="checkbox" id="is_default" name="is_default" class="checkbox checkbox-primary" />
                </label>
            </div>
            <div class="modal-action">
                <button type="button" class="btn btn-ghost" id="cancel-address-modal-btn">取消</button>
                <button type="submit" class="btn btn-primary">保存</button>
            </div>
        </form>
    </div>
</dialog>

<style>
    .filter-btn {
        font-size: 0.875rem;
        white-space: nowrap;
    }
</style>

<script>
    let currentUser: any = null;
    let allOrders: any[] = [];
    let currentFilter = '';

    async function apiCall(endpoint: string, options: any = {}) {
        const authToken = localStorage.getItem('authToken');
        const config = {
            headers: {
                'Content-Type': 'application/json',
                ...(authToken && { 'Authorization': `Bearer ${authToken}` })
            },
            ...options
        };

        try {
            const response = await fetch(`/api${endpoint}`, config);
            if (!response.ok) {
                const data = await response.json().catch(() => ({}));
                throw new Error(data.error || `API request failed with status ${response.status}`);
            }
            return await response.json();
        } catch (error: any) {
            console.error('API Error:', error);
            (window as any).showToast(error.message, 'error');
            throw error;
        }
    }

    function updateUI() {
        const userName = document.getElementById('user-name');
        const userAvatar = document.getElementById('user-avatar');
        const ordersList = document.getElementById('orders-list');
        const addressesList = document.getElementById('addresses-list');

        if (currentUser) {
            if (userName) userName.textContent = currentUser.username;
            if (userAvatar) userAvatar.textContent = currentUser.username.charAt(0).toUpperCase();
        } else {
            if (userName) userName.textContent = '用户名';
            if (userAvatar) userAvatar.textContent = 'U';
            if (ordersList) ordersList.innerHTML = '<div class="text-center text-gray-500 py-8">请先登录</div>';
            if (addressesList) addressesList.innerHTML = '<div class="text-center text-gray-500 py-4">请先登录</div>';
        }
    }

    async function loadProfile() {
        const authToken = localStorage.getItem('authToken');
        if (!authToken) {
            currentUser = null;
            updateUI();
            return;
        }
        try {
            const data = await apiCall('/user/profile');
            currentUser = data.user;
            updateUI();
            loadOrders();
            loadAddresses();
            
            // Initialize button states
            initializeFilterButtons();
        } catch (error) {
            console.error("Failed to load profile", error);
            currentUser = null;
            updateUI();
        }
    }
    
    function initializeFilterButtons() {
        const filterContainer = document.getElementById('order-filters');
        if (!filterContainer) return;
        
        const allButtons = filterContainer.querySelectorAll('.filter-btn');
        allButtons.forEach((btn, index) => {
            if (index === 0) { // First button ("全部") should be active by default
                btn.className = 'filter-btn btn btn-soft btn-primary active';
            } else {
                btn.className = 'filter-btn btn btn-soft';
            }
        });
    }

    // --- Order Logic ---
    const orderStatusMap: { [key: string]: string } = {
        pending: '已下单',
        processing: '待发货',
        shipped: '待收货',
        completed: '已完成'
    };

    function renderOrders() {
        const ordersList = document.getElementById('orders-list');
        if (!ordersList) return;

        if (!currentFilter) {
            ordersList.innerHTML = '<div class="text-center text-gray-500 py-8">请选择一个分类以查看订单</div>';
            return;
        }

        const filteredOrders = currentFilter === 'all' 
            ? allOrders 
            : allOrders.filter(order => order.status === currentFilter);

        if (filteredOrders.length === 0) {
            ordersList.innerHTML = '<div class="text-center text-gray-500 py-8">该分类下暂无订单</div>';
            return;
        }

        ordersList.innerHTML = filteredOrders.map((order: any) => `
            <div class="bg-base-300 rounded-lg p-4 shadow-sm">
                <div class="flex justify-between items-start mb-2">
                    <span class="text-sm text-gray-600">订单号: ${order.id}</span>
                    <span class="text-sm font-medium px-2 py-1 rounded-full ${
                        order.status === 'pending' ? 'bg-blue-100 text-blue-800' :
                        order.status === 'processing' ? 'bg-yellow-100 text-yellow-800' :
                        order.status === 'shipped' ? 'bg-orange-100 text-orange-800' :
                        order.status === 'completed' ? 'bg-green-100 text-green-800' :
                        'bg-gray-100 text-gray-800'
                    }">${orderStatusMap[order.status] || order.status}</span>
                </div>
                <div class="text-lg font-semibold text-gray-800 mb-1">¥${order.total}</div>
                <div class="text-sm text-gray-500">${new Date(order.created_at).toLocaleString()}</div>
            </div>
        `).join('');
    }

    async function loadOrders() {
        try {
            const data = await apiCall('/orders');
            allOrders = data.orders || [];
            renderOrders(); // Initial render will now show the placeholder
        } catch (error: any) {
            (window as any).showToast('加载订单失败', 'error');
        }
    }

    // --- Address Logic ---
    function renderAddresses(addresses: any[]) {
        const addressesList = document.getElementById('addresses-list');
        if (!addressesList) return;

        if (addresses.length === 0) {
            addressesList.innerHTML = '<div class="text-center text-gray-500 py-4">暂无收货地址</div>';
            return;
        }

        addressesList.innerHTML = addresses.map(addr => `
            <div class="border-t pt-3">
                <div class="flex justify-between items-start">
                    <div>
                        <div class="flex items-center">
                            <p class="font-semibold">${addr.recipient_name} <span class="font-normal text-gray-600 ml-2">${addr.phone}</span></p>
                            ${addr.is_default ? '<span class="ml-2 px-2 py-0.5 text-xs bg-primary-100 text-primary-700 rounded-full">默认</span>' : ''}
                        </div>
                        <p class="text-sm text-gray-600 mt-1">${addr.address}</p>
                    </div>
                    <div class="flex space-x-2">
                        <button class="edit-address-btn text-sm text-blue-600 hover:underline" data-id="${addr.id}">编辑</button>
                        <button class="delete-address-btn text-sm text-red-600 hover:underline" data-id="${addr.id}">删除</button>
                    </div>
                </div>
            </div>
        `).join('');

        document.querySelectorAll('.edit-address-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const id = (e.target as HTMLElement).dataset.id;
                const addressToEdit = addresses.find(a => a.id == id);
                if (addressToEdit) {
                    openAddressModal(addressToEdit);
                }
            });
        });

        document.querySelectorAll('.delete-address-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const id = (e.target as HTMLElement).dataset.id;
                if (confirm('确定要删除这个地址吗？')) {
                    try {
                        await apiCall(`/user/addresses/${id}`, { method: 'DELETE' });
                        (window as any).showToast('地址删除成功', 'success');
                        loadAddresses();
                    } catch (error) {
                        // API call already shows toast
                    }
                }
            });
        });
    }

    async function loadAddresses() {
        try {
            const data = await apiCall('/user/addresses');
            renderAddresses(data.addresses || []);
        } catch (error) {
            // API call already shows toast
        }
    }

    function openAddressModal(address: any = null) {
        const modal = document.getElementById('address-modal') as HTMLDialogElement;
        const form = document.getElementById('address-form') as HTMLFormElement;
        const modalTitle = document.getElementById('modal-title');
        
        if (!modal || !form || !modalTitle) return;

        form.reset();
        (document.getElementById('address-id') as HTMLInputElement).value = address ? address.id : '';
        (document.getElementById('recipient-name') as HTMLInputElement).value = address ? address.recipient_name : '';
        (document.getElementById('phone') as HTMLInputElement).value = address ? address.phone : '';
        (document.getElementById('address') as HTMLTextAreaElement).value = address ? address.address : '';
        (document.getElementById('is_default') as HTMLInputElement).checked = address ? address.is_default : false;
        modalTitle.textContent = address ? '编辑地址' : '添加新地址';

        modal.showModal();
    }

    function closeAddressModal() {
        const modal = document.getElementById('address-modal') as HTMLDialogElement;
        if (!modal) return;
        modal.close();
    }

    async function handleAddressFormSubmit(e: Event) {
        e.preventDefault();
        const form = e.target as HTMLFormElement;
        const id = (form.querySelector('#address-id') as HTMLInputElement).value;

        const data = {
            recipient_name: (form.querySelector('#recipient-name') as HTMLInputElement).value,
            phone: (form.querySelector('#phone') as HTMLInputElement).value,
            address: (form.querySelector('#address') as HTMLTextAreaElement).value,
            is_default: (form.querySelector('#is_default') as HTMLInputElement).checked
        };

        const method = id ? 'PUT' : 'POST';
        const endpoint = id ? `/user/addresses/${id}` : '/user/addresses';

        try {
            await apiCall(endpoint, { method, body: JSON.stringify(data) });
            (window as any).showToast(`地址${id ? '更新' : '添加'}成功`, 'success');
            closeAddressModal();
            loadAddresses();
        } catch (error) {
            // API call already shows toast
        }
    }

    // --- General & Event Listeners ---
    function logout() {
        localStorage.removeItem('authToken');
        currentUser = null;
        allOrders = [];
        updateUI();
        renderOrders();
        renderAddresses([]);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const logoutBtn = document.getElementById('logout-btn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => {
                localStorage.removeItem('authToken');
                currentUser = null;
                updateUI();
                window.location.href = '/'; 
                document.dispatchEvent(new CustomEvent('logoutsuccess'));
            });
        }

        // Order filter listeners
        const filterContainer = document.getElementById('order-filters');
        filterContainer?.addEventListener('click', (e) => {
            const target = e.target as HTMLElement;
            if (target.classList.contains('filter-btn')) {
                // Remove active state from all buttons
                const allButtons = filterContainer.querySelectorAll('.filter-btn');
                allButtons.forEach(btn => {
                    btn.classList.remove('active', 'btn-primary');
                    btn.className = 'filter-btn btn btn-soft';
                });
                
                // Add active state to clicked button
                target.classList.add('active');
                target.className = 'filter-btn btn btn-soft btn-primary active';
                
                currentFilter = target.dataset.status || 'all';
                renderOrders();
            }
        });

        // Address modal listeners
        document.getElementById('add-address-btn')?.addEventListener('click', () => openAddressModal());
        document.getElementById('address-form')?.addEventListener('submit', handleAddressFormSubmit);
        document.getElementById('cancel-address-modal-btn')?.addEventListener('click', closeAddressModal);

        loadProfile();
    });

    document.addEventListener('tabswitched', (event: any) => {
        if (event.detail.tab === 'profile') {
            loadProfile();
        }
    });

    document.addEventListener('loginsuccess', () => {
        loadProfile();
    });
</script>