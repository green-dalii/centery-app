---
import Toast from './Toast.astro';
import { Icon } from 'astro-icon/components';
---

<div id="cart-container" class="p-4">
  <div class="flex items-center text-base text-primary font-bold mb-4">
    <Icon name="mdi:cart" class="text-xl mr-2" />
    <h2>购物车</h2>
  </div>
  <div id="cart-items" class="space-y-4">
    <!-- Cart items will be injected here by JavaScript -->
  </div>
  <div class="fixed bottom-16 left-0 right-0 bg-base-100 p-4 border-t border-base-300">
    <div class="container mx-auto">
      <div class="flex justify-between items-center">
        <div>
          <input type="checkbox" id="select-all" class="checkbox mr-2" />
          <label for="select-all">全选</label>
        </div>
        <div class="text-lg text-primary font-bold">
          总价: ￥<span id="total-price">0.00</span>
        </div>
        <button id="checkout" class="btn btn-primary">下单</button>
      </div>
    </div>
  </div>
</div>

<!-- Order Confirmation Modal -->
<dialog id="order-confirmation-modal" class="modal">
  <div class="modal-box h-[60vh] overflow-y-auto">
    <h3 class="font-bold text-lg">确认订单</h3>
    <p class="py-4">请再次确认订单项目和收货地址</p>
    <div id="address-selection-container">
      <label class="form-control w-full">
        <div class="label">
          <span class="label-text">收货地址</span>
        </div>
        <div class="dropdown dropdown-bottom w-full">
          <div id="address-dropdown-btn" tabindex="0" role="button" class="btn btn-outline w-full justify-between">
            <span id="selected-address-text" class="text-left truncate flex-1">请选择收货地址</span>
            <svg class="w-4 h-4 ml-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </div>
          <ul id="address-dropdown-menu" tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[9999] w-full p-2 shadow-lg border border-base-300 max-h-60 overflow-y-auto">
            <!-- 地址选项将通过JavaScript动态添加 -->
          </ul>
        </div>
        <!-- 隐藏的select用于保持原有逻辑兼容性 -->
        <select id="address-select" class="hidden"></select>
      </label>
    </div>
    <div id="no-address-message" class="hidden">
      <p>您还没有添加收货地址，请点击底部导航栏的”我的“按钮添加地址。</p>
    </div>
    <div class="modal-action">
      <button id="cancel-order-btn" class="btn">取消</button>
      <button id="confirm-order-btn" class="btn btn-primary">确认下单</button>
    </div>
  </div>
</dialog>

<script>
    import { globalApiCall } from '../utils/api.ts';

    interface CartItem {
    id: string;
    name: string;
    image: string;
    price: number;
    unit: string;
    quantity: number;
    selected: boolean;
    stock: number;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const cartContainer = document.getElementById('cart-container');
    if (!cartContainer) return;

    const cartItemsContainer = document.getElementById('cart-items');
    const totalPriceEl = document.getElementById('total-price');
    const selectAllCheckbox = document.getElementById('select-all') as HTMLInputElement;
    const checkoutButton = document.getElementById('checkout');
    const orderConfirmationModal = document.getElementById('order-confirmation-modal') as HTMLDialogElement;
    const addressSelect = document.getElementById('address-select') as HTMLSelectElement;
    const addressSelectionContainer = document.getElementById('address-selection-container');
    const noAddressMessage = document.getElementById('no-address-message');
    const confirmOrderBtn = document.getElementById('confirm-order-btn') as HTMLButtonElement;
    const cancelOrderBtn = document.getElementById('cancel-order-btn');

    let cart: CartItem[] = [];

    function getCart(): CartItem[] {
      return JSON.parse(localStorage.getItem('cart') || '[]');
    }

    function saveCart() {
      localStorage.setItem('cart', JSON.stringify(cart));
    }

    function renderCart() {
      if (!cartItemsContainer) return;
      cart = getCart();
      
      if (cart.length === 0) {
        cartItemsContainer.innerHTML = '<p class="text-center text-gray-500">购物车是空的</p>';
        updateTotalPrice();
        return;
      }

      cartItemsContainer.innerHTML = '';
      cart.forEach((item, index) => {
        const itemElement = document.createElement('div');
        itemElement.className = 'flex items-center justify-between p-4 border border-base-300 rounded-lg bg-base-200';
        itemElement.innerHTML = `
          <div class="flex items-center">
            <input type="checkbox" class="item-checkbox mr-4" data-index="${index}" ${item.selected ? 'checked' : ''}>
            <img src="${item.image}" alt="${item.name}" class="w-16 h-16 object-cover mr-4 rounded-md">
            <div class="flex-grow">
              <h3 class="font-bold text-base-content">${item.name}</h3>
              <p class="text-sm text-primary">￥${item.price}/${item.unit}</p>
            </div>
          </div>
          <div class="flex items-center">
            <button class="btn btn-xs decrease-quantity" data-index="${index}">-</button>
            <input type="number" class="mx-1 text-center w-12 quantity-input" value="${item.quantity}" min="1" max="${item.stock}" data-index="${index}">
            <button class="btn btn-xs increase-quantity" data-index="${index}">+</button>
            <button class="ml-4 text-red-500 remove-item" data-index="${index}">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg>
            </button>
          </div>
        `;
        cartItemsContainer.appendChild(itemElement);
      });
      updateTotalPrice();
      updateSelectAllCheckbox();
    }

    function updateTotalPrice() {
      let totalPrice = 0;
      cart.forEach(item => {
        if (item.selected) {
          totalPrice += item.price * item.quantity;
        }
      });
      if(totalPriceEl) {
        totalPriceEl.textContent = totalPrice.toFixed(2);
      }
    }

    function updateSelectAllCheckbox() {
      if (selectAllCheckbox) {
        selectAllCheckbox.checked = cart.length > 0 && cart.every(item => item.selected);
      }
    }

    cartItemsContainer?.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      const button = target.closest('button') as HTMLButtonElement | null;
      const checkbox = target.closest('input[type="checkbox"]') as HTMLInputElement | null;

      if (button) {
        const index = parseInt(button.dataset.index || '');
        if (isNaN(index)) return;

        if (button.classList.contains('increase-quantity')) {
          if (cart[index].quantity < cart[index].stock) {
            cart[index].quantity++;
          } else {
            (window as any).showToast('已达到库存上限', 'error');
          }
        } else if (button.classList.contains('decrease-quantity')) {
          if (cart[index].quantity > 1) {
            cart[index].quantity--;
          } else {
            cart.splice(index, 1);
          }
        } else if (button.classList.contains('remove-item')) {
          cart.splice(index, 1);
        }
        saveCart();
        renderCart();
      }

      if (checkbox && checkbox.classList.contains('item-checkbox')) {
        const index = parseInt(checkbox.dataset.index || '');
        if (isNaN(index)) return;
        cart[index].selected = checkbox.checked;
        saveCart();
        updateTotalPrice();
        updateSelectAllCheckbox();
      }
    });

    cartItemsContainer?.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      if (target.classList.contains('quantity-input')) {
        const index = parseInt(target.dataset.index || '');
        if (isNaN(index)) return;

        let newQuantity = parseInt(target.value, 10);
        if (isNaN(newQuantity)) {
            newQuantity = 1;
        }

        const maxQuantity = parseInt(target.max, 10);
        if (newQuantity > maxQuantity) {
          newQuantity = maxQuantity;
          (window as any).showToast('已达到库存上限', 'error');
        }

        if (newQuantity < 1) {
          newQuantity = 1;
        }

        target.value = newQuantity.toString();
        cart[index].quantity = newQuantity;
        saveCart();
        updateTotalPrice();
      }
    });

    selectAllCheckbox?.addEventListener('change', () => {
      const checked = selectAllCheckbox.checked;
      cart.forEach(item => item.selected = checked);
      saveCart();
      renderCart();
    });

    checkoutButton?.addEventListener('click', async () => {
      const itemsToCheckout = cart.filter(item => item.selected);
      if (itemsToCheckout.length === 0) {
        (window as any).showToast('请在商城中选择商品并加入购物车', 'error');
        return;
      }
      await openOrderConfirmationModal();
    });

    async function openOrderConfirmationModal() {
      try {
        const token = localStorage.getItem('authToken');
        if (!token) {
          // Redirect to login or show message if not authenticated
          window.location.href = '/'; // Or show a login modal
          return;
        }

        // 使用全局API调用函数
        const data = await globalApiCall('/user/addresses');
        const addresses = data.addresses;

        if (addresses.length === 0) {
          addressSelectionContainer?.classList.add('hidden');
          noAddressMessage?.classList.remove('hidden');
          confirmOrderBtn?.classList.add('btn-disabled');
        } else {
          addressSelectionContainer?.classList.remove('hidden');
          noAddressMessage?.classList.add('hidden');
          confirmOrderBtn?.classList.remove('btn-disabled');

          // 清空并重新填充dropdown菜单和隐藏的select
          const dropdownMenu = document.getElementById('address-dropdown-menu');
          const selectedAddressText = document.getElementById('selected-address-text');
          
          addressSelect.innerHTML = '';
          if (dropdownMenu) dropdownMenu.innerHTML = '';
          
          let defaultAddress: any = null;
          
          addresses.forEach((addr: any) => {
            // 为隐藏的select添加option（保持兼容性）
            const option = document.createElement('option');
            option.value = addr.id;
            option.textContent = `${addr.recipient_name}, ${addr.phone}, ${addr.address}`;
            if (addr.is_default) {
              option.selected = true;
              defaultAddress = addr;
            }
            addressSelect.appendChild(option);
            
            // 为dropdown菜单添加选项
            if (dropdownMenu) {
              const li = document.createElement('li');
              li.innerHTML = `
                <a class="address-option flex flex-col items-start p-3 hover:bg-base-200 rounded-lg" data-address-id="${addr.id}">
                  <div class="flex items-center w-full">
                    <div class="flex-1">
                      <div class="font-medium text-base-content">${addr.recipient_name}</div>
                      <div class="text-sm text-base-content/70">${addr.phone}</div>
                      <div class="text-sm text-base-content/60 mt-1 leading-relaxed">${addr.address}</div>
                    </div>
                    ${addr.is_default ? '<div class="badge badge-primary badge-sm ml-2">默认</div>' : ''}
                  </div>
                </a>
              `;
              dropdownMenu.appendChild(li);
            }
          });
          
          // 设置默认选中的地址显示
           if (defaultAddress && selectedAddressText) {
             selectedAddressText.textContent = `${defaultAddress.recipient_name}, ${defaultAddress.phone}`;
           } else if (addresses.length > 0 && selectedAddressText) {
             selectedAddressText.textContent = `${addresses[0].recipient_name}, ${addresses[0].phone}`;
           }
           
           // 添加地址选项点击事件
           const addressOptions = dropdownMenu?.querySelectorAll('.address-option');
           addressOptions?.forEach(option => {
             option.addEventListener('click', (e) => {
               e.preventDefault();
               const addressId = option.getAttribute('data-address-id');
               const selectedAddr = addresses.find((addr: any) => addr.id.toString() === addressId);
               
               if (selectedAddr && selectedAddressText) {
                 // 更新显示文本
                 selectedAddressText.textContent = `${selectedAddr.recipient_name}, ${selectedAddr.phone}`;
                 
                 // 更新隐藏的select值（保持兼容性）
                 addressSelect.value = addressId || '';
                 
                 // 关闭dropdown
                 const dropdownBtn = document.getElementById('address-dropdown-btn');
                 const dropdownMenu = document.getElementById('address-dropdown-menu');
                 dropdownBtn?.blur();
                 dropdownMenu?.blur();
                 // 移除active状态
                 (document.activeElement as HTMLElement)?.blur();
               }
             });
           });
        }
        orderConfirmationModal?.showModal();
      } catch (error) {
        console.error('Error fetching addresses:', error);
        (window as any).showToast('获取地址失败', 'error');
      }
    }

    function closeOrderConfirmationModal() {
      orderConfirmationModal?.close();
    }

    cancelOrderBtn?.addEventListener('click', closeOrderConfirmationModal);

    confirmOrderBtn?.addEventListener('click', async () => {
      const selectedAddressId = addressSelect.value;
      if (!selectedAddressId) {
        (window as any).showToast('请选择收货地址', 'error');
        return;
      }

      const itemsToCheckout = cart.filter(item => item.selected);
      if (itemsToCheckout.length === 0) {
        (window as any).showToast('请在商城中选择商品并加入购物车', 'error');
        return;
      }

      // Stock validation
      for (const item of itemsToCheckout) {
        if (item.quantity > item.stock) {
          (window as any).showToast(`${item.name} 库存不足`, 'error');
          return;
        }
      }

      const originalButtonContent = confirmOrderBtn?.innerHTML;
      if (confirmOrderBtn) {
        confirmOrderBtn.disabled = true;
        confirmOrderBtn.innerHTML = `<span class="loading loading-spinner loading-sm"></span> 下单中...`;
      }

      try {
        // 使用全局API调用函数
        const data = await globalApiCall('/orders', {
          method: 'POST',
          body: JSON.stringify({
            items: itemsToCheckout.map(item => ({ id: item.id, quantity: item.quantity })),
            addressId: selectedAddressId
          })
        });

        if (data.success) {
          (window as any).showToast('订单创建成功！', 'success');
          // Clear selected items from cart
          cart = cart.filter(item => !item.selected);
          saveCart();
          renderCart();
          closeOrderConfirmationModal();
          // Dispatch an event to notify product list to refresh
          document.dispatchEvent(new CustomEvent('orderplaced'));
        }
        // globalApiCall已经处理了错误情况
      } catch (error: any) {
        console.error('Error creating order:', error);
        const errorMessage = error.message || '创建订单失败，请稍后再试';
        (window as any).showToast(errorMessage, 'error');
      } finally {
        if (confirmOrderBtn) {
          confirmOrderBtn.disabled = false;
          confirmOrderBtn.innerHTML = originalButtonContent || '确认下单';
        }
      }
    });

    // Listen for tab changes to render the cart
    document.addEventListener('tabswitched', (event: any) => {
        if (event.detail.tab === 'cart') {
            renderCart();
        }
    });

    // Initial render if the cart tab is active
    if (cartContainer.offsetParent !== null) {
      renderCart();
    }
  });
</script>