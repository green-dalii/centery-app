---
// Products.astro - 商品展示页面
import { Icon } from 'astro-icon/components';
import ModalToast from './ModalToast.astro';
---
<div class="drawer">
    <input id="category-drawer" type="checkbox" class="drawer-toggle" />
    <div class="drawer-content">
        <!-- 主要内容区域 -->
        <div class="relative">
    <div class="sticky top-14 bg-base-100 z-20 p-4 border-b border-base-200">
        <div class="flex items-center justify-between text-base text-primary font-bold mb-4">
            <div class="flex items-center">
                <Icon name="mdi:store" class="text-xl mr-2" />
                <h2>智慧鑫诚商城</h2>
            </div>
            <div class="flex items-center space-x-2">
                <label for="category-drawer" class="btn btn-ghost btn-sm p-2" title="商品分类">
                    <Icon name="mdi:menu" class="text-lg" /> 分类
                </label>
                <button id="refresh-button" class="btn btn-ghost btn-sm p-2" title="刷新商品">
                    <Icon name="mdi:refresh" class="text-lg" /> 刷新
                </button>
            </div>
        </div>
        <div class="flex">
            <input type="text" id="search-input" class="input input-bordered flex-1 rounded-r-none" placeholder="搜索商品...">
            <button id="search-button" class="btn btn-primary text-nowrap rounded-l-none">搜索</button>
        </div>
    </div>
    <div class="p-4 pt-2">
        <div id="loading-indicator" class="text-center py-10"><span class="loading loading-spinner loading-md"></span>载入中...</div>
        <div id="products-container" class="hidden">
            <div id="products-list" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                <!-- Product items will be injected here -->
            </div>
        </div>
        <div id="pagination-container" class="mt-4 flex justify-center items-center space-x-2">
            <!-- Pagination will be loaded here -->
        </div>
    </div>
        </div>
    </div>
    <!-- Drawer侧边栏 -->
    <div class="drawer-side">
        <label for="category-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
        <div class="bg-base-200 text-base-content min-h-fit w-80 p-4 mt-44">
            <div class="flex items-center justify-between mb-4">
                <h3 class="font-bold">商品分类</h3>
                <label for="category-drawer" class="btn btn-ghost btn-sm">
                    <Icon name="mdi:close" class="text-lg" />
                </label>
            </div>
            <div id="loading-categories" class="text-center py-4">
                <span class="loading loading-spinner loading-sm"></span>
                <span class="ml-2">加载中...</span>
            </div>
            <ul id="categories-list" class="menu hidden">
                <!-- 分类列表将在这里动态生成 -->
            </ul>
        </div>
    </div>
</div>

<dialog id="add_to_cart_modal" class="modal">
  <div class="modal-box p-0">
    <ModalToast />
    <div class="w-full h-64 bg-base-200 overflow-hidden">
      <img id="modal-product-image" src="" alt="" class="w-full h-full object-cover" style="display: none;">
    </div>
    <div class="p-6">
      <h3 id="modal-product-name" class="font-bold text-lg mb-4"></h3>
    <div class="grid grid-cols-1 gap-4 text-sm">
      <div class="flex items-center">
        <span class="w-16">单价</span>
        <p id="modal-product-price" class="font-semibold"></p>
      </div>
      <div class="flex items-center">
        <span class="w-16">库存</span>
        <p id="modal-product-stock" class="font-semibold"></p>
        <p id="modal-product-stock-unit" class="ml-2"></p>
      </div>
      <div class="flex items-center">
        <span class="w-16">下单量</span>
        <div class="join">
          <button id="quantity-minus" class="btn join-item">-</button>
          <input id="modal-quantity-input" type="number" value="1" min="1" class="input input-bordered join-item text-center w-20"/>
          <button id="quantity-plus" class="btn join-item">+</button>
        </div>
        <p id="modal-product-unit" class="ml-2"></p>
      </div>
      <div class="flex flex-col">
         <span class="w-16 mb-2">描述</span>
         <p id="modal-product-description" class="text-sm text-base-content/70 leading-relaxed"></p>
       </div>
     </div>
     <div class="modal-action mt-6">
       <button id="modal-add-to-cart-btn" class="btn btn-primary">加入购物车</button>
       <form method="dialog">
         <button class="btn">取消</button>
       </form>
     </div>
    </div>
   </div>
 </dialog>

<script>
    import { globalApiCall } from '../utils/api.ts';
    
    let currentPageToken = '';
    let hasMore = false;
    let pageTokens: string[] = [];
    let currentPageIndex = 0;
    let isRefreshing = false;
    let categories: any[] = [];
    let selectedCategory = '';

    // 使用全局API调用函数
    const apiCall = globalApiCall;

    // 加载分类数据
    async function loadCategories(forceRefresh = false) {
        const loadingIndicator = document.getElementById('loading-categories');
        const categoriesList = document.getElementById('categories-list');
        
        if (loadingIndicator) loadingIndicator.classList.remove('hidden');
        if (categoriesList) categoriesList.classList.add('hidden');

        const cacheKey = 'product_categories';
        
        if (!forceRefresh) {
            const cachedData = sessionStorage.getItem(cacheKey);
            if (cachedData) {
                categories = JSON.parse(cachedData);
                renderCategories();
                if (loadingIndicator) loadingIndicator.classList.add('hidden');
                if (categoriesList) categoriesList.classList.remove('hidden');
                return;
            }
        }

        try {
            const data = await globalApiCall('/products/categories');
            categories = data.categories || [];
            sessionStorage.setItem(cacheKey, JSON.stringify(categories));
            renderCategories();
        } catch (error: any) {
            console.error('加载分类失败:', error);
            if (categoriesList) {
                categoriesList.innerHTML = '<li><p class="text-center text-gray-500">加载分类失败</p></li>';
            }
        } finally {
            if (loadingIndicator) loadingIndicator.classList.add('hidden');
            if (categoriesList) categoriesList.classList.remove('hidden');
        }
    }

    // 渲染分类列表
    function renderCategories() {
        const categoriesList = document.getElementById('categories-list');
        if (!categoriesList) return;
        
        const allCategoryItem = `
            <li>
                <a class="category-item ${selectedCategory === '' ? 'active bg-primary text-primary-content' : 'hover:bg-base-300'}" data-category="">
                    <div class="w-4 h-4 rounded-full mr-2" style="background-color: #6b7280"></div>
                    全部商品
                </a>
            </li>
        `;
        
        const categoryItems = categories.map(category => `
            <li>
                <a class="category-item ${selectedCategory === category.name ? 'active bg-primary text-primary-content' : 'hover:bg-base-300'}" data-category="${category.name}">
                    <div class="w-4 h-4 rounded-full mr-2" style="background-color: ${getCategoryColor(category.color)}"></div>
                    ${category.name}
                </a>
            </li>
        `).join('');
        
        categoriesList.innerHTML = allCategoryItem + categoryItems;
    }

    // 获取分类颜色
    function getCategoryColor(colorIndex: number): string {
        const colors = [
            '#ef4444', '#f97316', '#f59e0b', '#eab308', '#84cc16',
            '#22c55e', '#10b981', '#14b8a6', '#06b6d4', '#0ea5e9',
            '#3b82f6', '#6366f1', '#8b5cf6', '#a855f7', '#d946ef',
            '#ec4899', '#f43f5e'
        ];
        return colors[colorIndex % colors.length] || '#6b7280';
    }

    // 更新分类按钮文字
    function updateCategoryButtonText() {
        const categoryButton = document.querySelector('label[for="category-drawer"]');
        if (!categoryButton) return;
        
        const textContent = selectedCategory === '' ? '分类' : `分类：${selectedCategory}`;
        categoryButton.innerHTML = `<svg class="text-lg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 6h18v2H3V6m0 5h18v2H3v-2m0 5h18v2H3v-2Z"/></svg> ${textContent}`;
    }

    // 加载商品列表
    async function loadProducts(pageToken = '', searchTerm = '', category = '', forceRefresh = false) {
        const loadingIndicator = document.getElementById('loading-indicator');
        const productsContainer = document.getElementById('products-container');
        const productsList = document.getElementById('products-list');
        
        if (!isRefreshing) {
            if (loadingIndicator) loadingIndicator.classList.remove('hidden');
            if (productsContainer) productsContainer.classList.add('hidden');
        }

        const cacheKey = `products_${searchTerm}_${category}_${pageToken}`;
        
        if (!forceRefresh) {
            const cachedData = sessionStorage.getItem(cacheKey);
            if (cachedData) {
                const data = JSON.parse(cachedData);
                renderProducts(data.products);
                hasMore = data.hasMore;
                currentPageToken = data.nextPageToken;
                updatePagination();
                if (loadingIndicator) loadingIndicator.classList.add('hidden');
                if (productsContainer) productsContainer.classList.remove('hidden');
                return;
            }
        }

        try {
            const data = await globalApiCall(`/products?pageSize=12&pageToken=${pageToken}&q=${encodeURIComponent(searchTerm)}&category=${encodeURIComponent(category)}`);
            sessionStorage.setItem(cacheKey, JSON.stringify(data));
            renderProducts(data.products);
            hasMore = data.hasMore;
            currentPageToken = data.nextPageToken;
            updatePagination();
        } catch (error: any) {
            // globalApiCall已经处理了401错误和Toast显示
            if (!error.message.includes('未授权')) {
                (window as any).showToast('加载商品失败', 'error');
            }
            if (productsList) {
                productsList.innerHTML = '<p class="text-center text-gray-500">加载失败，请稍后重试。</p>';
            }
        } finally {
            if (loadingIndicator) loadingIndicator.classList.add('hidden');
            if (productsContainer) productsContainer.classList.remove('hidden');
        }
    }

    // 渲染商品列表
    function renderProducts(products: any[]) {
        const productsList = document.getElementById('products-list');
        if (!productsList) return;
        
        if (products.length === 0) {
            productsList.innerHTML = '<p class="text-center text-gray-500">没有找到相关商品。</p>';
            return;
        }

        productsList.innerHTML = products.map((product: any) => {
            const stockValue = product.stock && product.stock.value && product.stock.value.length > 0 ? product.stock.value[0] : 0;
            const isOutOfStock = stockValue <= 0;
            const productForButton = { ...product, stock: stockValue };

            return `
            <div class="bg-base-200 rounded-lg border border-base-300 shadow-sm overflow-hidden flex items-center p-2" data-record-id="${product.id}">
                <div class="w-20 h-20 bg-base-200 rounded-md overflow-hidden flex-shrink-0">
                    ${product.image ? `<img src="${product.image}" alt="${product.name}" class="lazyload w-full h-full object-cover" loading="lazy">` : ''}
                </div>
                <div class="pl-4 flex-1">
                    <h3 class="font-medium text-base-content truncate">${product.name}</h3>
                    <p class="text-xs text-base-content/50">${product.type || '&nbsp;'}</p>
                    <div class="flex items-baseline">
                        <span class="text-lg font-bold text-primary">¥${product.price}</span>
                        <span class="text-xs text-base-content/70 ml-1">/${product.unit}</span>
                    </div>
                </div>
                <button 
                    class="add-to-cart-btn ${isOutOfStock ? 'bg-base-300 cursor-not-allowed text-base-content' : 'bg-primary hover:opacity-90 text-white'} px-3 py-1 rounded-md text-sm ml-4" 
                    data-product='${JSON.stringify(productForButton)}'
                    ${isOutOfStock ? 'disabled' : ''}
                >
                    ${isOutOfStock ? '已售罄' : '加入购物车'}
                </button>
            </div>
        `}).join('');
    }

    // 更新分页按钮
    function updatePagination() {
        const paginationContainer = document.getElementById('pagination-container');
        if (!paginationContainer) return;

        let prevButtonHTML = `<button id="prev-page" class="btn btn-sm" ${currentPageIndex === 0 ? 'disabled' : ''}>上一页</button>`;
        let nextButtonHTML = `<button id="next-page" class="btn btn-sm" ${!hasMore ? 'disabled' : ''}>下一页</button>`;

        paginationContainer.innerHTML = `${prevButtonHTML} ${nextButtonHTML}`;

        document.getElementById('prev-page')?.addEventListener('click', () => {
            if (currentPageIndex > 0) {
                currentPageIndex--;
                loadProducts(pageTokens[currentPageIndex], (document.getElementById('search-input') as HTMLInputElement).value, selectedCategory);
            }
        });

        document.getElementById('next-page')?.addEventListener('click', () => {
            if (hasMore) {
                if (!pageTokens.includes(currentPageToken)) {
                    pageTokens.push(currentPageToken);
                }
                currentPageIndex++;
                loadProducts(currentPageToken, (document.getElementById('search-input') as HTMLInputElement).value, selectedCategory);
            }
        });
    }

    interface Product {
        id: string;
        name: string;
        price: number;
        unit: string;
        stock: number;
        quantity?: number;
        selected?: boolean;
    }

    // 加入购物车
    function addToCart(product: Product, quantity: number = 1) {
        let cart = JSON.parse(localStorage.getItem('cart') || '[]') as Product[];
        const existingProduct = cart.find(item => item.id === product.id);

        if (existingProduct) {
            existingProduct.quantity = (existingProduct.quantity || 0) + quantity;
        } else {
            cart.push({ ...product, quantity, selected: true });
        }

        localStorage.setItem('cart', JSON.stringify(cart));
        (window as any).showToast('已添加到购物车', 'success');
    }

    // 初始化购物车事件监听
    document.addEventListener('DOMContentLoaded', () => {
        const quantityInput = document.getElementById('modal-quantity-input') as HTMLInputElement;
        const quantityMinus = document.getElementById('quantity-minus');
        const quantityPlus = document.getElementById('quantity-plus');
        

        quantityMinus?.addEventListener('click', () => {
            let currentValue = parseInt(quantityInput.value, 10);
            if (currentValue > 1) {
                quantityInput.value = (currentValue - 1).toString();
            }
        });

        quantityPlus?.addEventListener('click', () => {
            const max = parseInt(quantityInput.max, 10);
            let currentValue = parseInt(quantityInput.value, 10);
            
            // 获取当前商品数据
            const modalAddToCartBtn = document.getElementById('modal-add-to-cart-btn');
            const productData = modalAddToCartBtn ? JSON.parse(modalAddToCartBtn.getAttribute('data-product') || '{}') : {};
            
            if (currentValue < max) {
                quantityInput.value = (currentValue + 1).toString();
            } else if (quantityInput.disabled === true && productData.stock > 0) {
                // 当input被禁用且库存不为零时，显示购物车该商品数量已达库存上限的提示
                (window as any).showModalToast(`购物车该商品数量已达库存上限`, 'error');
            } else {
                // 显示Toast提示，数量不能超过最大库存
                (window as any).showModalToast(`下单数量不能超过最大库存 ${max} 件`, 'error');
            }
        });

        quantityInput?.addEventListener('change', () => {
            const max = parseInt(quantityInput.max, 10);
            if (isNaN(max)) return;
            let currentValue = parseInt(quantityInput.value, 10);
            if (currentValue > max) {
                quantityInput.value = max.toString();
                // 显示Toast提示，数量不能超过最大库存
                (window as any).showModalToast(`下单数量不能超过最大库存 ${max} 件`, 'error');
            }
            if (currentValue < 1) {
                quantityInput.value = "1";
            }
        });

        // Add event listener for modal add to cart button
        const modalAddToCartBtn = document.getElementById('modal-add-to-cart-btn');
        if (modalAddToCartBtn) {
            modalAddToCartBtn.addEventListener('click', () => {
                const productData = JSON.parse(modalAddToCartBtn.getAttribute('data-product') || '{}') as Product;
                const quantityInput = document.getElementById('modal-quantity-input') as HTMLInputElement;
                const quantityToAdd = parseInt(quantityInput.value, 10);

                let cart = JSON.parse(localStorage.getItem('cart') || '[]') as Product[];
                const existingProduct = cart.find(item => item.id === productData.id);
                const quantityInCart = existingProduct ? (existingProduct.quantity || 0) : 0;

                // 检查库存情况
                if (productData.stock === 0) {
                    (window as any).showModalToast('商品已售罄', 'error');
                    return;
                }

                if (quantityInCart >= productData.stock) {
                    (window as any).showModalToast('购物车数量已达库存上限', 'error');
                    return;
                }

                if (quantityToAdd + quantityInCart > productData.stock) {
                    const remainingStock = productData.stock - quantityInCart;
                    (window as any).showModalToast(`库存不足，您最多还能添加 ${remainingStock} 件`, 'error');
                    return;
                }

                if (productData.id && quantityToAdd > 0) {
                    addToCart(productData, quantityToAdd);
                    const addToCartModal = document.getElementById('add_to_cart_modal') as HTMLDialogElement;
                    if (addToCartModal) {
                        addToCartModal.close();
                    }
                }
            });
        }
        document.addEventListener('loadproducts', () => {
            if (localStorage.getItem('authToken')) {
                pageTokens = [''];
                currentPageIndex = 0;
                // 不清空缓存，优先使用已有的商品数据
                loadProducts('', '', selectedCategory, false);
            }
        });
        
        // 添加强制刷新商品的事件监听器
        document.addEventListener('refreshproducts', () => {
            if (localStorage.getItem('authToken')) {
                pageTokens = [''];
                currentPageIndex = 0;
                sessionStorage.clear(); // 强制刷新时清空缓存
                loadProducts('', '', selectedCategory, true);
            }
        });

        document.getElementById('search-button')?.addEventListener('click', () => {
            const searchTerm = (document.getElementById('search-input') as HTMLInputElement).value;
            pageTokens = [''];
            currentPageIndex = 0;
            sessionStorage.clear(); // Clear cache on new search
            loadProducts('', searchTerm, selectedCategory, true);
        });

        document.getElementById('products-list')?.addEventListener('click', (e) => {
            const target = e.target as HTMLElement;
            const button = target.closest('.add-to-cart-btn');
            if (button) {
                const productData = JSON.parse(button.getAttribute('data-product') || '{}');
                
                const addToCartModal = document.getElementById('add_to_cart_modal') as any;
                const modalProductName = document.getElementById('modal-product-name');
                const modalProductPrice = document.getElementById('modal-product-price');
                const modalProductUnit = document.getElementById('modal-product-unit');
                const modalProductStock = document.getElementById('modal-product-stock');
                const modalProductStockUnit = document.getElementById('modal-product-stock-unit');
                const modalProductImage = document.getElementById('modal-product-image') as HTMLImageElement;
                const modalProductDescription = document.getElementById('modal-product-description');
                const modalQuantityInput = document.getElementById('modal-quantity-input') as HTMLInputElement;
                const modalAddToCartBtn = document.getElementById('modal-add-to-cart-btn') as HTMLButtonElement;

                if (modalProductName) modalProductName.textContent = productData.name;
                if (modalProductPrice) modalProductPrice.textContent = `¥${productData.price}`;
                if (modalProductStock) modalProductStock.textContent = productData.stock;
                if (modalProductStockUnit) modalProductStockUnit.textContent = productData.unit;
                if (modalProductDescription) modalProductDescription.textContent = productData.description || '暂无描述';
                
                if (modalProductImage) {
                    if (productData.image) {
                        modalProductImage.src = productData.image;
                        modalProductImage.alt = productData.name;
                        modalProductImage.style.display = 'block';
                    } else {
                        modalProductImage.style.display = 'none';
                    }
                }
                
                if (modalQuantityInput && modalAddToCartBtn) {
                    // 检查购物车数量是否已达库存上限
                    let cart = JSON.parse(localStorage.getItem('cart') || '[]') as Product[];
                    const existingProduct = cart.find(item => item.id === productData.id);
                    const quantityInCart = existingProduct ? (existingProduct.quantity || 0) : 0;
                    const maxQuantity = productData.stock - quantityInCart;
                    
                    // 根据库存情况设置单位文字
                    if (modalProductUnit) {
                        if (maxQuantity <= 0 && productData.stock > 0) {
                            modalProductUnit.textContent = '购物车该类已满';
                        } else {
                            modalProductUnit.textContent = productData.unit;
                        }
                    }

                    modalQuantityInput.value = '1';
                    modalQuantityInput.max = maxQuantity.toString();

                    if (maxQuantity <= 0) {
                        modalQuantityInput.value = '0';
                        modalQuantityInput.disabled = true;
                        modalAddToCartBtn.disabled = true;
                    } else {
                        modalQuantityInput.disabled = false;
                        modalAddToCartBtn.disabled = false;
                    }
                }
                
                if (modalAddToCartBtn) {
                    modalAddToCartBtn.setAttribute('data-product', button.getAttribute('data-product') || '{}');
                }

                if (addToCartModal) {
                    addToCartModal.showModal();
                }
            }
        });

        // 添加刷新按钮事件监听器
        document.getElementById('refresh-button')?.addEventListener('click', () => {
            // 清除搜索条件
            const searchInput = document.getElementById('search-input') as HTMLInputElement;
            if (searchInput) {
                searchInput.value = '';
            }
            
            // 重置分类选择
            selectedCategory = '';
            
            // 更新分类按钮文字
            updateCategoryButtonText();
            
            // 重置分页
            pageTokens = [''];
            currentPageIndex = 0;
            
            // 清除缓存并重新加载
            sessionStorage.clear();
            loadCategories(true);
            loadProducts('', '', '', true);
        });

        // 添加分类点击事件监听器
        document.getElementById('categories-list')?.addEventListener('click', (e) => {
            const target = e.target as HTMLElement;
            const categoryItem = target.closest('.category-item');
            if (categoryItem) {
                const category = categoryItem.getAttribute('data-category') || '';
                selectedCategory = category;
                
                // 更新分类选中状态
                document.querySelectorAll('.category-item').forEach(item => {
                    item.classList.remove('active', 'bg-primary', 'text-primary-content');
                    item.classList.add('hover:bg-base-300');
                });
                categoryItem.classList.remove('hover:bg-base-300');
                categoryItem.classList.add('active', 'bg-primary', 'text-primary-content');
                
                // 更新分类按钮文字
                updateCategoryButtonText();
                
                // 重新加载商品列表
                const searchTerm = (document.getElementById('search-input') as HTMLInputElement).value;
                pageTokens = [''];
                currentPageIndex = 0;
                sessionStorage.removeItem(`products_${searchTerm}_${category}_`);
                loadProducts('', searchTerm, selectedCategory, true);
                
                // 关闭抽屉
                const drawerToggle = document.getElementById('category-drawer') as HTMLInputElement;
                if (drawerToggle) {
                    drawerToggle.checked = false;
                }
            }
        });

        // 初始加载分类数据
        loadCategories();
        
        // 初始化分类按钮文字
        updateCategoryButtonText();
    });

    // 订单 placed 事件监听器
    document.addEventListener('orderplaced', () => {
        sessionStorage.clear();
        pageTokens = [''];
        currentPageIndex = 0;
        loadProducts('', '', selectedCategory, true);
    });

    // 切换标签页事件监听器
    document.addEventListener('tabswitched', (event: any) => {
        if (event.detail.tab === 'products') {
            // 优先使用现有缓存，避免重复请求
            const searchTerm = (document.getElementById('search-input') as HTMLInputElement)?.value || '';
            const cacheKey = `products_${searchTerm}_${selectedCategory}_`;
            const cachedData = sessionStorage.getItem(cacheKey);
            
            if (cachedData) {
                try {
                    const data = JSON.parse(cachedData);
                    renderProducts(data.products);
                    hasMore = data.hasMore;
                    currentPageToken = data.nextPageToken;
                    updatePagination();
                    const loadingIndicator = document.getElementById('loading-indicator');
                    const productsContainer = document.getElementById('products-container');
                    if (loadingIndicator) loadingIndicator.classList.add('hidden');
                    if (productsContainer) productsContainer.classList.remove('hidden');
                    return;
                } catch (e) {
                    console.warn('解析缓存商品数据失败:', e);
                }
            }
            
            // 如果没有缓存或解析失败，则加载数据但不强制刷新
            pageTokens = [''];
            currentPageIndex = 0;
            loadProducts('', searchTerm, selectedCategory, false);
        }
    });
</script>